"""
SkCode footnotes tag definitions code.
"""

from html import escape as escape_html

from .base import TagOptions
from ..tools import (escape_attrvalue,
                     slugify)


# Footnote ID format for HTML rendering
FOOTNOTE_ID_HTML_FORMAT = 'footnotes-%s'


class FootnoteDeclarationTagOptions(TagOptions):
    """ Footnote declaration tag options container class. """

    inline = True
    close_inlines = False

    # Footnote ID attribute name
    footnote_id_attr_name = 'id'

    def get_footnote_id_from_counter(self, tree_node):
        """
        Get the footnote ID from the counter stored in the root tree node or in the tree node cache.
        :param tree_node: The current tree node instance.
        :return: The footnote ID retrieved from the root tree node counter.
        """

        # Get the ID from the node cache if exists
        if hasattr(tree_node, '_cached_footnote_counter'):
            return str(getattr(tree_node, '_cached_footnote_counter'))

        # Got up to the root node
        root_tree_node = tree_node
        while root_tree_node.parent is not None:
            root_tree_node = root_tree_node.parent

        # Get the current counter value
        counter = getattr(root_tree_node, '_last_footnote_counter', 0)

        # Increment and store the counter
        counter += 1
        setattr(root_tree_node, '_last_footnote_counter', counter)

        # Store the ID in the node cache to avoid multiple ID generation
        setattr(tree_node, '_cached_footnote_counter', counter)

        # Return the ID for this footnote
        return str(counter)

    def get_footnote_id(self, tree_node, use_autogenerated_id=True):
        """
        Get the ID of this footnote.
        The ID can be set by setting the footnote_id_attr_name attribute of the tag or simply
        by setting the tag name attribute. If not set, an auto-generated ID will be used.
        The lookup order is: tag name (first), footnote_id_attr_name, auto generated ID.
        :param tree_node: The current tree node instance.
        :return: The ID of this footnote.
        """
        footnote_id = tree_node.attrs.get(tree_node.name, '')
        if not footnote_id:
            footnote_id = tree_node.attrs.get(self.footnote_id_attr_name, '')
        if not footnote_id and use_autogenerated_id:
            footnote_id = self.get_footnote_id_from_counter(tree_node)
        return slugify(footnote_id)

    def render_html(self, tree_node, inner_html, force_rel_nofollow=True):
        """
        Callback function for rendering HTML.
        :param force_rel_nofollow: If set, all links in the rendered HTML will have "rel=nofollow" (default to True).
        :param tree_node: Current tree node to be rendered.
        :param inner_html: Inner HTML of this tree node.
        :return Rendered HTML of this node.
        """

        # Get the footnote ID
        footnote_id = self.get_footnote_id(tree_node)

        # Render the footnote
        return '<a id="%s"><sup>[%s]</sup></a>' % (escape_html(FOOTNOTE_ID_HTML_FORMAT % footnote_id), footnote_id)

    def render_text(self, tree_node, inner_text):
        """
        Callback function for rendering text.
        :param tree_node: Current tree node to be rendered.
        :param inner_text: Inner text of this tree node.
        :return Rendered text of this node.
        """

        # Get the footnote ID
        footnote_id = self.get_footnote_id(tree_node)

        # Render the footnote
        return '[^%s]' % footnote_id

    def render_skcode(self, tree_node, inner_skcode):
        """
        Callback function for rendering SkCode.
        :param tree_node: Current tree node to be rendered.
        :param inner_skcode: Inner SkCode of this tree node.
        :return Rendered SkCode of this node.
        """

        # Get the footnote ID
        footnote_id = self.get_footnote_id(tree_node, use_autogenerated_id=False)

        # Render ID
        if footnote_id:
            extra_attrs = ' %s=%s' % (self.footnote_id_attr_name,
                                      escape_attrvalue(footnote_id))
        else:
            extra_attrs = ''

        # Render the footnote
        node_name = tree_node.name
        return '[%s%s]%s[/%s]' % (node_name, extra_attrs, inner_skcode, node_name)


class FootnoteReferenceTagOptions(TagOptions):
    """ Footnote reference tag options container class. """

    inline = True
    close_inlines = False

    def get_footnote_id(self, tree_node):
        """
        Get the target ID of this footnote reference from the content of the node.
        :param tree_node: The current tree node instance.
        :return: The target ID of this footnote reference.
        """
        return slugify(tree_node.get_raw_content())

    def render_html(self, tree_node, inner_html, force_rel_nofollow=True):
        """
        Callback function for rendering HTML.
        :param force_rel_nofollow: If set, all links in the rendered HTML will have "rel=nofollow" (default to True).
        :param tree_node: Current tree node to be rendered.
        :param inner_html: Inner HTML of this tree node.
        :return Rendered HTML of this node.
        """

        # Get the footnote ID
        footnote_id = self.get_footnote_id(tree_node)

        # Render the footnote
        if footnote_id:
            return '<a id="%s"><sup>[%s]</sup></a>' % (escape_html(FOOTNOTE_ID_HTML_FORMAT % footnote_id), footnote_id)
        else:
            return ''

    def render_text(self, tree_node, inner_text):
        """
        Callback function for rendering text.
        :param tree_node: Current tree node to be rendered.
        :param inner_text: Inner text of this tree node.
        :return Rendered text of this node.
        """

        # Get the footnote ID
        footnote_id = self.get_footnote_id(tree_node)

        # Render the footnote
        if footnote_id:
            return '[^%s]' % footnote_id
        else:
            return inner_text

    def render_skcode(self, tree_node, inner_skcode):
        """
        Callback function for rendering SkCode.
        :param tree_node: Current tree node to be rendered.
        :param inner_skcode: Inner SkCode of this tree node.
        :return Rendered SkCode of this node.
        """

        # Get the footnote ID
        footnote_id = self.get_footnote_id(tree_node)

        # Render the footnote
        if footnote_id:
            node_name = tree_node.name
            return '[%s]%s[/%s]' % (node_name, footnote_id, node_name)
        else:
            return inner_skcode
